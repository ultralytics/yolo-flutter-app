group 'com.ultralytics.yolo'
version '1.0'

buildscript {
    ext.kotlin_version = "1.8.22"
    repositories {
        google()
        mavenCentral()
    }

    dependencies {
        classpath("com.android.tools.build:gradle:8.5.2")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version")
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
    }
}

apply plugin: "com.android.library"
apply plugin: "kotlin-android"

// Flutter SDK path
def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    // Try to get Flutter root from environment variable
    flutterRoot = System.getenv('FLUTTER_ROOT')
}

android {
    namespace = "com.ultralytics.yolo"
    compileSdk = 35

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_17.toString() // Use toString() for jvmTarget
    }

    // Configure Java Toolchain to use JDK 17
    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(17)
        }
    }

    sourceSets {
        main.java.srcDirs += "src/main/kotlin"
        test.java.srcDirs += "src/test/kotlin"
    }

    defaultConfig {
        minSdk = 21
        
        // Native library build configuration
        externalNativeBuild {
            cmake {
                cppFlags ""
                arguments "-DANDROID_STL=c++_shared"
                // NDK r28: ANDROID_SUPPORT_FLEXIBLE_PAGE_SIZES is ON by default
            }
        }

        // Supported ABIs
        ndk {
            abiFilters "armeabi-v7a", "arm64-v8a", "x86", "x86_64"
            // NDK r28: 16KB page size support enabled by default
            ndkVersion = "28.0.13004108"
        }
    }
    
    // CMake build configuration
    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
        }
    }

    dependencies {
        // Flutter embedding - continue build even if not found in CI environment
        if (flutterRoot) {
            compileOnly files("$flutterRoot/bin/cache/artifacts/engine/android-arm/flutter.jar")
            compileOnly files("$flutterRoot/bin/cache/artifacts/engine/android-arm64/flutter.jar") 
            compileOnly files("$flutterRoot/bin/cache/artifacts/engine/android-x86/flutter.jar")
            compileOnly files("$flutterRoot/bin/cache/artifacts/engine/android-x64/flutter.jar")
        } else {
            // If Flutter SDK not found, use embedding-release as fallback
            compileOnly 'io.flutter:flutter_embedding_release:1.0.0-ee76268252c22f5c11e82a7b87423ca3982e51a7'
        }
        
        implementation("com.google.ai.edge.litert:litert:1.4.0")
        implementation("com.google.ai.edge.litert:litert-gpu:1.4.0")
        implementation('com.google.ai.edge.litert:litert-support-api:1.4.0')
        implementation('com.google.ai.edge.litert:litert-metadata:1.4.0')
        testImplementation("junit:junit:4.13.2")
        androidTestImplementation("androidx.test.ext:junit:1.1.5")
        androidTestImplementation("androidx.test.espresso:espresso-core:3.5.1")
        implementation("org.yaml:snakeyaml:1.29")
        implementation("androidx.camera:camera-core:1.2.3")
        implementation("androidx.camera:camera-camera2:1.2.3")
        implementation("androidx.camera:camera-lifecycle:1.2.3")
        implementation("androidx.camera:camera-view:1.2.3")
        implementation("androidx.core:core-ktx:1.10.1")
        implementation("androidx.appcompat:appcompat:1.6.1")
        
        testImplementation("org.jetbrains.kotlin:kotlin-test")
        testImplementation("org.mockito:mockito-core:5.0.0")
    }

    testOptions {
        unitTests.all {
            useJUnitPlatform()

            testLogging {
               events "passed", "skipped", "failed", "standardOut", "standardError"
               outputs.upToDateWhen {false}
               showStandardStreams = true
            }
        }
    }
}
